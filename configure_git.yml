---
# Sample command from this directory with the `ansible-playbook` command:
# ansible-playbook configure_git.yml --ask-vault-pass
# Sample command from this directory with the `ansible-navigator` command:
# ansible-navigator run configure_git.yml -i inventory-ee --mode stdout --pae false --ask-vault-pass
- name: Configure Git
  hosts: workstation
  become: true
  vars_files:
    - vars.yml
  vars:
    the_user: student
    git_scope: global
    the_git_fullname: >-
      {{ git_config | selectattr('setting', '==', 'user.name') |
      map(attribute='value') | first }}
    the_git_username: >-
      {{ git_config | selectattr('setting', '==', 'user.email') |
      map(attribute='value') | first | split('@') | first }}
    git_personal_config: ~{{ the_user }}/.gitconfig-{{ the_git_username }}
  tasks:
    - name: Fail if git_scope does not have a value of 'global' or 'local'
      ansible.builtin.assert:
        that:
          - git_scope is defined
          - (git_scope | lower == "global") or (git_scope | lower == "local")
        success_msg: >-
          The 'git_scope' variable is defined with a value of
          '{{ git_scope }}'.
        fail_msg: >-
          The 'git_scope' variable must be defined with a value of either
          'global' or 'local'.
      tags: git

    - name: Global Git settings block
      block:
        - name: Copy {{ git_personal_config }} to ~{{ the_user }}/.gitconfig
          ansible.builtin.copy:
            src: "{{ git_personal_config }}"
            dest: ~{{ the_user }}/.gitconfig
            owner: "{{ the_user }}"
            group: "{{ the_user }}"
            mode: '0664'
            remote_src: true

      rescue:
        - name: Configure Git user.name
          ansible.builtin.command: >-
            git config --{{ git_scope }} --replace-all
            {{ item['setting'] }} "{{ item['value'] }}"
          loop: "{{ git_config }}"
          loop_control:
            label: Configuring the '{{ item["setting"] }}' setting.
          when: item['setting'] == 'user.name'

        - name: Configure Git settings
          ansible.builtin.command: >-
            git config --{{ git_scope }} --replace-all
            {{ item['setting'] }} {{ item['value'] }}
          loop: "{{ git_config }}"
          loop_control:
            label: Configuring the '{{ item["setting"] }}' setting.
          when: item['setting'] != 'user.name'

        - name: Copy ~{{ the_user }}/.gitconfig to {{ git_personal_config }}
          ansible.builtin.copy:
            src: ~{{ the_user }}/.gitconfig
            dest: "{{ git_personal_config }}"
            owner: "{{ the_user }}"
            group: "{{ the_user }}"
            mode: '0444'
            remote_src: true
      when: git_scope | lower == "global"
      tags: git

    - name: Local Git settings block
      block:
        - name: Check {{ repo }}/.git
          ansible.builtin.stat:
            path: "{{ repo }}/.git"
          register: repo_git

        - name: Fail if {{ repo }}/.git does not exist
          ansible.builtin.assert:
            that: repo_git['stat']['exists'] | bool == true
            success_msg: The '{{ repo }}' directory contains a Git repository.
            fail_msg: >-
              The '{{ repo }}' directory does not contain a Git repository.

        - name: Configure Git user.name
          ansible.builtin.command: >-
            git config --{{ git_scope }} --replace-all
            {{ item['setting'] }} "{{ item['value'] }}"
          args:
            chdir: "{{ repo }}"
          loop: "{{ git_config }}"
          loop_control:
            label: Configuring the '{{ item["setting"] }}' setting.
          when: item['setting'] == 'user.name'

        - name: Configure Git settings
          ansible.builtin.command: >-
            git config --{{ git_scope }} --replace-all
            {{ item['setting'] }} {{ item['value'] }}
          args:
            chdir: "{{ repo }}"
          loop: "{{ git_config }}"
          loop_control:
            label: Configuring the '{{ item["setting"] }}' setting.
          when: item['setting'] != 'user.name'
      when:
        - git_scope | lower == "local"
        - repo is defined
      tags: git
